{
	"info": {
		"_postman_id": "02d204eb-6df5-42d7-9bba-38974651da05",
		"name": "imgur",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Get Account Albuns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8bf84eb4-656d-4dd7-967c-5d06884b6436",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"Get empty album list\", function(){\r",
									"    pm.expect(responseJson.data.length).to.eql(0);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/account/me/albums/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"account",
								"me",
								"albums",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts Data Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "812584d2-4a3d-4231-88ee-14b1df6a0e88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/account/me/images",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"account",
								"me",
								"images"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "372630be-5e3d-44d3-9851-3ba2bf0f8cac",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "f354ee76-a8b2-4ccc-8ced-4e78d45140ca",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"should get 200\", function(){",
							"    pm.expect(pm.response.code).eql(200)",
							"})"
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Albuns",
			"item": [
				{
					"name": "Create Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a98a752-4fc7-471e-920d-a3cc3ab0b1ad",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"\r",
									"pm.test(\"test album creation successfuly\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"pm.test(\"test new album id hashes is not null\", function(){\r",
									"    pm.collectionVariables.set(\"newAlbumHashes\", responseJson.data.id);\r",
									"    pm.expect(responseJson.data.id).is.not.null\r",
									"});\r",
									"pm.test(\"test new album deletehash is not null\", function(){\r",
									"    pm.collectionVariables.set(\"newAlbumDeleteHashes\", responseJson.data.deletehash);\r",
									"    pm.expect(responseJson.data.deletehash).is.not.null\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0323985-c70a-474c-a945-24f319bb618b",
								"exec": [
									"//Showing off some resources of postman's embedded Javascript  libraries\r",
									"//Using an array in Variables. Yes we can!\r",
									"const prefixo = pm.collectionVariables.get(\"prefixList\");\r",
									"\r",
									"//Using Dynamic Variables from the amazing faker.js\r",
									"const suffix = pm.variables.replaceIn('{{$randomLoremSentence}}');\r",
									"\r",
									"//Using the _.sample from the amazing lodash\r",
									"const baseName = _.sample(prefixo.split(\",\"));\r",
									"\r",
									"pm.collectionVariables.set(\"randomAlbumName\", baseName + \" album \" + suffix);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{randomAlbumName}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "{{$randomLoremSentence}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit existing Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f37e3c24-745c-4c67-a585-4f2eec5e3753",
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.expect(pm.response.status).to.be.ok;\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cbe2e6ff-15ff-440b-b50e-a70f37b87554",
								"exec": [
									"const edtTitle = \"EDT \" + pm.collectionVariables.get(\"randomAlbumName\");\r",
									"pm.collectionVariables.set(\"randomAlbumNameEdited\", edtTitle);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{randomAlbumNameEdited}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{newAlbumDeleteHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Album",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Album Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac3ac88c-2c56-4755-b50c-7480fc6257ca",
								"exec": [
									"pm.test(\"test not found album is 404\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{$randomAlphaNumeric}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Album Images",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albunHashes/images",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albunHashes",
								"images"
							],
							"variable": [
								{
									"key": "albunHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed552378-4314-4c40-892b-636dac76a926",
								"exec": [
									"pm.test(\"test album deleted successfuly\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af914387-21ed-4f39-8d69-4b4d3511a685",
								"exec": [
									"pm.test(\"test delete of not found album is 404\", function(){\r",
									"    pm.expect(pm.response.code).eql(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "unknown"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "f194226e1cc71002ebc5187ab4e21539c214393d",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7cb08487-8958-4f12-8cb4-450645a353d9",
				"type": "text/javascript",
				"exec": [
					"//Iniciação da data de criação do Token",
					"let tokenDate = new Date();",
					"",
					"//Caso exista um timestamp registrado atualiza a data de criação do",
					"//token a partir dessa data",
					"let tokenTimeStamp = pm.collectionVariables.get(\"tokenTimeStamp\");",
					"if(tokenTimeStamp){",
					"    tokenDate = Date.parse(tokenTimeStamp);",
					"}",
					"",
					"//Define o tempo de expiração do token",
					"let expiresInTime = pm.collectionVariables.get(\"expiresIn\");",
					"if(!expiresInTime){",
					"    console.log(\"Expires In: \"+expiresInTime);",
					"    expiresInTime = 0;",
					"}",
					"",
					"//Caso a diferença entre a data na qual a request está sendo feita",
					"//e a data de criação do token sejam superiores ao tempo de expiração",
					"//um novo request ao refresh token é realizado",
					"if((new Date() - tokenDate) >= expiresInTime){",
					"    console.log(\"Token expired!\");",
					"    console.log(\"Preparing Refresh Token Request\");",
					"    const refreshTokenRequest = {",
					"        url: 'https://api.imgur.com/oauth2/token',",
					"        method: 'POST',",
					"        body: {",
					"            mode: 'formdata',",
					"            formdata: [",
					"                    { key: \"refresh_token\", value: pm.environment.get(\"refreshToken\") },",
					"                    { key: \"grant_type\", value: \"refresh_token\" },",
					"                    { key: \"client_id\", value: pm.environment.get(\"clientId\") },",
					"                    { key: \"client_secret\", value: pm.environment.get(\"clientSecret\") }",
					"            ]",
					"        }",
					"    };",
					"    console.log(\"Beggining Authentication\");",
					"    pm.sendRequest(refreshTokenRequest, function (err, res) {",
					"        if(!err){",
					"            console.log(\"Authentication successfull\");",
					"            pm.environment.set(\"accessToken\", res.json().access_token);",
					"            pm.environment.set(\"refreshToken\", res.json().refresh_token);",
					"            pm.collectionVariables.set(\"expiresIn\", res.json().expires_in);",
					"            pm.collectionVariables.set(\"tokenTimeStamp\", new Date());",
					"            console.log(\"accessToken and refreshToken setup successfull\");",
					"        }else{",
					"            console.log(err);",
					"        }",
					"    });",
					"}else{",
					"    console.log(\"Token valid.\")",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "50cb22f9-3cc5-4a86-a289-2653756e7127",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "79b8a1ce-12ce-49a7-a29e-08e9f09dc592",
			"key": "expiresIn",
			"value": 315360000
		},
		{
			"id": "7d439e75-f6f3-4b72-a53b-f9b006b886ca",
			"key": "tokenTimeStamp",
			"value": "2020-06-23T02:49:43.643Z"
		},
		{
			"id": "e6802b4e-e65b-40ee-bfa9-1ed5ca411085",
			"key": "prefixList",
			"value": "[\"my\", \"awesome\", \"hilarious\", \"trip\", \"amazing\", \"aweful\", \"nice\", \"tedious\"]"
		},
		{
			"id": "cac04bb2-77e1-47d6-ad4b-82e354d5d1a3",
			"key": "newAlbumHashes",
			"value": ""
		},
		{
			"id": "aecf00d1-a2d8-4698-81a8-9917a2693319",
			"key": "randomAlbumName",
			"value": ""
		},
		{
			"id": "a1780fa2-4b90-46fe-a497-778caa193cce",
			"key": "newAlbumDeleteHashes",
			"value": ""
		},
		{
			"id": "1deb1b01-c122-44f2-84e2-40a0ea18cd7a",
			"key": "randomAlbumNameEdited",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}