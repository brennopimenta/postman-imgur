{
	"info": {
		"_postman_id": "02d204eb-6df5-42d7-9bba-38974651da05",
		"name": "imgur",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Accounts",
			"item": [
				{
					"name": "Get Account Albuns",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{accessToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/account/me/albums/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"account",
								"me",
								"albums",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Accounts Data Images",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "812584d2-4a3d-4231-88ee-14b1df6a0e88",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/account/me/images",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"account",
								"me",
								"images"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Albuns",
			"item": [
				{
					"name": "Create Album",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a98a752-4fc7-471e-920d-a3cc3ab0b1ad",
								"exec": [
									"const responseJson = pm.response.json();\r",
									"console.log(responseJson.data.id);\r",
									"pm.collectionVariables.set(\"newAlbumHashes\", responseJson.data.id);\r",
									"\r",
									"pm.test(\"test album creation successfuly\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e0323985-c70a-474c-a945-24f319bb618b",
								"exec": [
									"//Showing off some resources of postman's embedded Javascript  libraries\r",
									"//Using an array in Variables. Yes we can!\r",
									"const prefixo = pm.collectionVariables.get(\"prefixList\");\r",
									"\r",
									"//Using Dynamic Variables from the amazing faker.js\r",
									"const suffix = pm.variables.replaceIn('{{$randomLoremSentence}}');\r",
									"\r",
									"//Using the _.sample from the amazing lodash\r",
									"const baseName = _.sample(prefixo.split(\",\"));\r",
									"\r",
									"pm.collectionVariables.set(\"randomAlbumName\", baseName + \" album \" + suffix);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "title",
									"value": "{{randomAlbumName}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Description Post Album",
									"type": "text"
								},
								{
									"key": "ids[]",
									"value": "[8ck0x4o,iObj5Jp]",
									"type": "text",
									"disabled": true
								},
								{
									"key": "cover",
									"value": "iObj5Jp",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Existing Album",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Album Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac3ac88c-2c56-4755-b50c-7480fc6257ca",
								"exec": [
									"pm.test(\"test not found album is 404\", function(){\r",
									"    pm.expect(pm.response.code).to.eql(404);\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "notfoundalbum"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Album Images",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albunHashes/images",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albunHashes",
								"images"
							],
							"variable": [
								{
									"key": "albunHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "8KPn0yb"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Album Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af914387-21ed-4f39-8d69-4b4d3511a685",
								"exec": [
									"pm.test(\"test delete of not found album is 404\", function(){\r",
									"    pm.expect(pm.response.code).eql(404)\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"key": "albumHashes",
									"value": "{{$randomNoun}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Most recently added Album",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/{{version}}/album/:albumHashes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"{{version}}",
								"album",
								":albumHashes"
							],
							"variable": [
								{
									"description": "Recently added ",
									"key": "albumHashes",
									"value": "{{newAlbumHashes}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "accessToken",
				"value": "f194226e1cc71002ebc5187ab4e21539c214393d",
				"type": "string"
			},
			{
				"key": "tokenType",
				"value": "bearer",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7cb08487-8958-4f12-8cb4-450645a353d9",
				"type": "text/javascript",
				"exec": [
					"//Iniciação da data de criação do Token",
					"let tokenDate = new Date();",
					"",
					"//Caso exista um timestamp registrado atualiza a data de criação do",
					"//token a partir dessa data",
					"let tokenTimeStamp = pm.collectionVariables.get(\"tokenTimeStamp\");",
					"if(tokenTimeStamp){",
					"    tokenDate = Date.parse(tokenTimeStamp);",
					"}",
					"",
					"//Define o tempo de expiração do token",
					"let expiresInTime = pm.collectionVariables.get(\"expiresIn\");",
					"if(!expiresInTime){",
					"    expiresInTime = 0;",
					"}",
					"",
					"//Caso a diferença entre a data na qual a request está sendo feita",
					"//e a data de criação do token sejam superiores ao tempo de expiração",
					"//um novo request ao refresh token é realizado",
					"if((new Date() - tokenDate) >= expiresInTime){",
					"    console.log(\"Token expired!\");",
					"    console.log(\"Preparing Refresh Token Request\");",
					"    const refreshTokenRequest = {",
					"        url: 'https://api.imgur.com/oauth2/token',",
					"        method: 'POST',",
					"        body: {",
					"            mode: 'formdata',",
					"            formdata: [",
					"                    { key: \"refresh_token\", value: pm.environment.get(\"refreshToken\") },",
					"                    { key: \"grant_type\", value: \"refresh_token\" },",
					"                    { key: \"client_id\", value: pm.environment.get(\"clientId\") },",
					"                    { key: \"client_secret\", value: pm.environment.get(\"clientSecret\") }",
					"            ]",
					"        }",
					"    };",
					"    console.log(\"Beggining Authentication\");",
					"    pm.sendRequest(refreshTokenRequest, function (err, res) {",
					"        if(!err){",
					"            console.log(\"Authentication successfull\");",
					"            pm.environment.set(\"accessToken\", res.json().access_token);",
					"            pm.environment.set(\"refreshToken\", res.json().refresh_token);",
					"            pm.collectionVariables.set(\"expiresIn\", res.json().expires_in);",
					"            pm.collectionVariables.set(\"tokenTimeStamp\", new Date());",
					"            console.log(\"accessToken and refreshToken setup successfull\");",
					"        }else{",
					"            console.log(err);",
					"        }",
					"    });",
					"}else{",
					"    console.log(\"Token valid.\")",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "50cb22f9-3cc5-4a86-a289-2653756e7127",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "ef7a32ce-1255-4aba-a0c8-29df38215f61",
			"key": "expiresIn",
			"value": 315360000
		},
		{
			"id": "e7ea64ac-04dd-4855-bf1c-c362aa00fdea",
			"key": "tokenTimeStamp",
			"value": "2020-06-23T02:49:43.643Z"
		},
		{
			"id": "d137a07c-3eee-4238-9dfd-3557d3b70991",
			"key": "prefixList",
			"value": "[\"my\", \"awesome\", \"hilarious\", \"trip\", \"amazing\", \"aweful\", \"nice\", \"tedious\"]"
		},
		{
			"id": "afe8ce1c-046f-446d-9e94-997987c159bc",
			"key": "newAlbumHashes",
			"value": ""
		},
		{
			"id": "063e82b9-8f7e-4924-afa7-580196c402c7",
			"key": "randomAlbumName",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}